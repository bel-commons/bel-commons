# Follow guide at https://realpython.com/blog/python/dockerizing-flask-with-compose-and-machine-from-localhost-to-the-cloud/

version: '3'

services:
  web:
    build: .
    volumes:
     - .:/app
    environment:
      PYBEL_CONNECTION: postgresql://pybeluser:pybelpassword@database14:5432/pybel14
      CELERY_BROKER_URL: amqp://broker
      CELERY_BACKEND_URL: redis://result_backend
      BEL_COMMONS_SECRET_KEY: ${SECRET_KEY}
      BEL_COMMONS_SECURITY_PASSWORD_SALT: ${SECURITY_PASSWORD_SALT}
    restart: always
    command: gunicorn -b 0.0.0.0:5002 bel_commons.wsgi:flask_app --log-level=INFO
    ports:
      - 5002:5002
    depends_on:
     - database14
     - broker
     - result_backend
     - worker

  worker:
    build: .
    volumes:
     - .:/app
    environment:
      PYBEL_CONNECTION: postgresql://pybeluser:pybelpassword@database14:5432/pybel14
      CELERY_BROKER_URL: amqp://broker
      CELERY_BACKEND_URL: redis://result_backend
      BEL_COMMONS_SECRET_KEY: ${SECRET_KEY}
      BEL_COMMONS_SECURITY_PASSWORD_SALT: ${SECURITY_PASSWORD_SALT}
    restart: always
    command: celery worker -A bel_commons.wsgi.celery_app -l INFO
    depends_on:
     - database14
     - broker
     - result_backend

  database14:
    image: postgres:11.1
    environment:
      POSTGRES_USER: pybeluser
      POSTGRES_PASSWORD: pybelpassword
      POSTGRES_DB: pybel14
    ports:
      - 5432:5432

  broker:
    image: rabbitmq:3.7.7-alpine

  result_backend:
    image: redis:4.0.11-alpine
